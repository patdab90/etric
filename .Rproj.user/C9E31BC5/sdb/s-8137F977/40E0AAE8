{
    "contents" : "etric.baseModel <- function(etric){\n  etric <- createB1Constraint(etric)\n  etric <- createB2Constraint(etric)\n  return(etric)\n}\n\ncreateB1Constraint <- function(etric){\n  lhs <- matrix(0, ncol=ncol(etric$constr$lhs), nrow=1, dimnames=list(\"B1\",colnames(etric$constr$lhs)))\n  weigthConst[, etricutils.w(1:etric$m)] <- 1\n  etric$constr$lhs <- rbind(etric$constr$lhs, weigthConst)\n  \n  etric$constr$rhs <- rbind(etric$constr$rhs, matrix(1, ncol=1, nrow=1, dimnames=list(\"B1\")))\n  etric$constr$dir <- rbind(etric$constr$dir, matrix(\"==\", ncol=1, nrow=1, dimnames=list(\"B1\")))\n  return(etric)\n}\n\ncreateB2Constraint <- function(etric){\n  for(j in 1:etric$m){\n    wName <- etricutils.w(j)\n    lhs <- matrix(0, nrow=1, ncol=ncol(etric$constr$lhs), dimnames=list(paste0(\"B2.\",j), colnames(etric$constr$lhs)))\n    lhs[,wName] <- 1\n    etric$constr$lhs <- rbind(etric$constr$lhs, lhs)\n    \n    #tymczasowo wszytskie wagi są równe\n    etric$constr$rhs <- rbind(etric$constr$rhs, matrix(1/etric$m, ncol=1, nrow=1, dimnames=list(paste0(\"B2.\",j))))\n    etric$constr$dir <- rbind(etric$constr$dir, matrix(\"==\", ncol=1, nrow=1, dimnames=list(paste0(\"B2.\",j))))\n  }\n  return(etric)\n}\n\ncreateB3Constraint <- function(etric){\n  J <- 1:etric$m\n  nrow <- (etric$p-1)\n  H <- 1:nrow\n  rownames <- paste0(\"B3.\",1:nrow)\n  lhs <- matrix(0, ncol=ncol(etric$constr$lhs), nrow=nrow, dimnames=list(rownames, colnames(etric$constr$lhs)))\n  dir <- matrix(\"<=\", nrow=nrow, dimnames=list(rownames))\n  rhs <- matrix(0, nrow=nrow, dimnames=list(rownames))\n  for(h in H){\n    lhs[h, etricutils.cBB(J, h, h+1)] <- 1\n    lhs[h, etricutils.e()] <- 1\n    lhs[h, etricutils.L()] <- -1\n  }\n  \n  etric$constr$lhs <- rbind(etric$constr$lhs, lhs)\n  etric$constr$dir <- rbind(etric$constr$dir, dir)\n  etric$constr$rhs <- rbind(etric$constr$rhs, rhs)\n  return(etric)\n}\n\ncreateB4Constraint <- function(etric){\n  rownames <- paste0(\"B4.\",1:2)\n  \n  lhs <- matrix(0, nrow=2, ncol=ncol(etric$constr$lhs), dimnames=list(rownames, colnames(etric$constr$lhs)))\n  lhs[,\"L\"] <- 1\n  etric$constr$lhs <- rbind(etric$constr$lhs, lhs)\n  etric$constr$rhs <- rbind(etric$constr$rhs, matrix(c(1, 0.5), ncol=1, nrow=2, dimnames=list(rownames))\n  etric$constr$dir <- rbind(etric$constr$dir, matrix(c(\"<=\",\">=\"), ncol=1, nrow=2, dimnames=list(rownames))\n  \n  return(etric)\n}\n\ncreateB5Constraint <- function(etric){\n  W <- paste0(\"w\",1:etric$m)\n  m <- length(W)\n  rownames <- paste0(\"B5.\",1:(m*2)\n  lhs <- matrix(0, nrow = m*2, ncol=ncol(etric$constr$lhs),\n                dimnames = list(rownames), colnames(etric$constr$lhs)))\n  dir <- matrix(rep.int(c(\">=\",\"<=\"),times=m), nrow = m*2, ncol = 1, dimnames = list(rownames))\n  rhs <- matrix(rep.int(c(0, 1),times=m), nrow = m*2, ncol = 1, dimnames = list(rownames))\n  \n  row <- 0\n  for(name in W){\n    row <- row + 1\n    lhs[row,name] <- 1\n    \n    row <- row + 1\n    lhs[row,name] <- 1\n    \n  }\n  \n  etric$constr$lhs <- rbind(etric$constr$lhs, lhs)\n  etric$constr$rhs <- rbind(etric$constr$rhs, rhs)\n  etric$constr$dir <- rbind(etric$constr$dir, dir)\n  \n  return(etric)\n}\n\ncreateB6Constraint <- function(etric, performances, profiles, th, monotonicity){\n  nrows <- etric$m*(etric$p+1)*etric$n*2+(etric$p-1)*etric$m\n  \n  rownames <- paste0(\"B6.\", 1:nrows)\n  lhs <- matrix(0, ncol=ncol(etric$constr$lhs), nrow=nrows, dimnames=list(rownames, colnames(etric$constr$lhs)))\n  \n  row <- 0\n  for (j in 1:etric$m) {\n    for (a in 1:etric$n) {\n      for (b in 0:etric$p) {\n        row = row + 1        \n        indAB <- etricutils.cAB(j, a, b)\n        lhs[row,indAB] = 1\n        val = outranking(performances[a,j], profiles[b+1,j],\n                         th[j,2], th[j,1], th[j, 4], th[j, 3], monotonicity[j])\n        lhs[row, etricutils.w(j)] = -1 * val\n      }\n    }\n  }\n  \n  for (j in 1:etric$m) {\n    for (b in 0:etric$p) {\n      for (a in 1:etric$n) {\n        row = row + 1        \n        indBA <- etricutils.cBA(j, b, a) \n        lhs[row,indBA] = 1\n        val <-  outranking(profiles[b+1,j], performances[a,j],\n                           th[j,2], th[j,1], th[j, 4], th[j, 3], monotonicity[j])\n        lhs[row, etricutils.w(j)] = -1 * val\n      }\n    }\n  }\n  \n  for (j in 1:etric$m) {\n    for (b in 0:(etric$p-1)) {\n      row = row + 1        \n      indBB <- etricutils.cBB(j, b, b+1) \n      lhs[row,indBB] = 1\n      val <-  outranking(profiles[b+1,j], performances[b+2,j],\n                         th[j,2], th[j,1], th[j, 4], th[j, 3], monotonicity[j])\n      lhs[row, etricutils.w(j)] = -1 * val     \n    }\n  }\n  \n  etric$constr$lhs <- rbind(etric$constr$lhs, lhs)\n  \n  message(nrow(lhs))\n  message(length(rownames))\n  message(row)\n  \n  dir <- matrix(\"==\", nrow=row, ncol=1)\n  rownames(dir) <- rownames\n  etric$constr$dir <- rbind(etric$constr$dir, dir)\n  rhs <- matrix(0, nrow=nrows, ncol=1)\n  rownames(rhs) <- rownames\n  etric$constr$rhs <- rbind(etric$constr$rhs, rhs)\n  \n  return(etric)\n}\n\noutranking <- function(x, y, qb, qa, pb, pa, ascending){\n  px <- pa * x + pb\n  py <- pa * y + pb\n  qx <- qa * x + qb\n  qy <- qa * y + qb\n  diff <- y - x\n  if(ascending == FALSE){\n    diff <- 0 - diff\n  }\n  if(diff >= px){\n    return(0)\n  }else if(diff <= qx){\n    return(1)\n  }else \n    return((px - diff)/(px - qx))\n}",
    "created" : 1407241845031.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3301059566",
    "id" : "40E0AAE8",
    "lastKnownWriteTime" : 1407264121,
    "path" : "C:/Users/Patryk/Desktop/Praca Magisterska/ELECTRE TRI C/etric/etricbase.R",
    "project_path" : "etricbase.R",
    "properties" : {
        "tempName" : "Untitled2"
    },
    "source_on_save" : false,
    "type" : "r_source"
}