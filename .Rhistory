library(stringr) # for tests cases
solvers <- ROI_installed_solvers()
if (!is.na(solvers['symphony'])) {
.solver <<- 'symphony'
} else if (!is.na(solvers['glpk'])) {
.solver <<- 'glpk'
} else {
stop("No ROI Symphony or GLPK plugin installed")
}
source('etric.R')
#warianty
alts <- read.table(file="alts.csv", sep="\t", header=TRUE)
rownames(alts) = alts[,1]
alts <- alts[,2:ncol(alts)]
#granice klas
profs <- read.table(file="profs.csv", sep="\t", header=FALSE)
rownames(profs) = profs[,1]
profs <- profs[,2:ncol(profs)]
colnames(profs) <- colnames(alts)
#przykładowe progi
thresholds <- matrix(c(
0, 4, 0, 12,
0, 1, 0, 2,
0, 100, 0, 200),ncol=4, byrow=TRUE)
# przykładowe przdziały do klas
assigs1 <- NULL#matrix(c(2, 1, 2, 5, 2, 3),ncol=3, byrow=TRUE)
monotonicity <- c(TRUE, TRUE, FALSE)
cardinalities <- NULL#matrix(c(1, 1, 2, 3, 1, 1), ncol=3, byrow=TRUE)
pairwiseComparisionsK <- matrix(c(1, 2, 0), ncol=3, byrow=TRUE)
pairwiseComparisionsL <- matrix(c(5, 2, 2), ncol=3, byrow=TRUE)
message("--- starting tests, iteration 1")
etri <- etric.init(alts, profs, assigs1, monotonicity, th=thresholds,
cardinalities, pairwiseComparisionsK, pairwiseComparisionsL)
etri$constr$lhs[str_detect(rownames(etri$constr$lhs),"PC*"),]
source('etricutils.R')
source('etricommon.R')
source('etricbase.R')
source('etricassignment.R')
source('etricpaiwisecmp.R')
etric.init <- function(performances, profiles, assignments, monotonicity, th, cardinalities, pCk, pCl){
stopifnot(ncol(performances) == ncol(profiles))
stopifnot(is.null(assignments) || ncol(assignments) == 3)
stopifnot((is.null(pCk)) || (ncol(pCk) == 3))
stopifnot(is.null(pCl) || ncol(pCl) == 3)
stopifnot(nrow(assignments) < nrow(performances))
stopifnot(nrow(th) == ncol(performances))
stopifnot(nrow(th) == length(monotonicity))
message("--- Constructing model")
n <- nrow(performances)
p <- nrow(profiles)-2 # p - liczba klas. Klas jest o 2 mniej niż profili
m <- ncol(performances)
A <- 1:n ## an
B <- 0:(p+1) ## profile
H <- 1:p ## klasy
J <- 1:m ## j
etric <- list()
etric$n <- n
etric$p <- p
etric$m <- m
var <- etricutils.createVarnames(n, p, J, pCk, pCl)
etric$binaryvar <- var$binary
etric$constr$lhs <- intiLHS(c(var$float, var$binary))
etric$constr$dir <- initDIR()
etric$constr$rhs <- initRHS()
etric <- etric.buildBaseModel(etric, performances, profiles, th, monotonicity)
etric <- etric.buildAEModel(etric, assignments)
etric <- etric.buildPCModel(etric, pCk, pCl )
return(etric)
}
intiLHS <- function(names){
lhs <- matrix(0, ncol=length(names), nrow=1,dimnames=list("E", names))
lhs["E",etricutils.e()] <- 1
return(lhs)
}
initDIR <- function(){
dir <- matrix(c(">="))
rownames(dir) <- c("E")
return(dir)
}
initRHS <- function(){
rhs <- matrix(MINEPS)
rownames(rhs) <- "E"
return(rhs)
}
library(ROI.plugin.glpk)
library(ROI)
library(stringr) # for tests cases
solvers <- ROI_installed_solvers()
if (!is.na(solvers['symphony'])) {
.solver <<- 'symphony'
} else if (!is.na(solvers['glpk'])) {
.solver <<- 'glpk'
} else {
stop("No ROI Symphony or GLPK plugin installed")
}
source('etric.R')
#warianty
alts <- read.table(file="alts.csv", sep="\t", header=TRUE)
rownames(alts) = alts[,1]
alts <- alts[,2:ncol(alts)]
#granice klas
profs <- read.table(file="profs.csv", sep="\t", header=FALSE)
rownames(profs) = profs[,1]
profs <- profs[,2:ncol(profs)]
colnames(profs) <- colnames(alts)
#przykładowe progi
thresholds <- matrix(c(
0, 4, 0, 12,
0, 1, 0, 2,
0, 100, 0, 200),ncol=4, byrow=TRUE)
# przykładowe przdziały do klas
assigs1 <- NULL#matrix(c(2, 1, 2, 5, 2, 3),ncol=3, byrow=TRUE)
monotonicity <- c(TRUE, TRUE, FALSE)
cardinalities <- NULL#matrix(c(1, 1, 2, 3, 1, 1), ncol=3, byrow=TRUE)
pairwiseComparisionsK <- matrix(c(1, 2, 0), ncol=3, byrow=TRUE)
pairwiseComparisionsL <- matrix(c(5, 2, 2), ncol=3, byrow=TRUE)
message("--- starting tests, iteration 1")
etri <- etric.init(alts, profs, assigs1, monotonicity, th=thresholds,
cardinalities, pairwiseComparisionsK, pairwiseComparisionsL)
etri$constr$lhs[str_detect(rownames(etri$constr$lhs),"PC*"),]
library(ROI.plugin.glpk)
library(ROI)
library(stringr) # for tests cases
solvers <- ROI_installed_solvers()
if (!is.na(solvers['symphony'])) {
.solver <<- 'symphony'
} else if (!is.na(solvers['glpk'])) {
.solver <<- 'glpk'
} else {
stop("No ROI Symphony or GLPK plugin installed")
}
source('etric.R')
#warianty
alts <- read.table(file="alts.csv", sep="\t", header=TRUE)
rownames(alts) = alts[,1]
alts <- alts[,2:ncol(alts)]
#granice klas
profs <- read.table(file="profs.csv", sep="\t", header=FALSE)
rownames(profs) = profs[,1]
profs <- profs[,2:ncol(profs)]
colnames(profs) <- colnames(alts)
#przykładowe progi
thresholds <- matrix(c(
0, 4, 0, 12,
0, 1, 0, 2,
0, 100, 0, 200),ncol=4, byrow=TRUE)
# przykładowe przdziały do klas
assigs1 <- NULL#matrix(c(2, 1, 2, 5, 2, 3),ncol=3, byrow=TRUE)
monotonicity <- c(TRUE, TRUE, FALSE)
cardinalities <- NULL#matrix(c(1, 1, 2, 3, 1, 1), ncol=3, byrow=TRUE)
pairwiseComparisionsK <- matrix(c(1, 2, 0), ncol=3, byrow=TRUE)
pairwiseComparisionsL <- matrix(c(5, 2, 2), ncol=3, byrow=TRUE)
message("--- starting tests, iteration 1")
etri <- etric.init(alts, profs, assigs1, monotonicity, th=thresholds,
cardinalities, pairwiseComparisionsK, pairwiseComparisionsL)
etri$constr$lhs[str_detect(rownames(etri$constr$lhs),"PC*"),]
library(ROI.plugin.glpk)
library(ROI)
library(stringr) # for tests cases
solvers <- ROI_installed_solvers()
if (!is.na(solvers['symphony'])) {
.solver <<- 'symphony'
} else if (!is.na(solvers['glpk'])) {
.solver <<- 'glpk'
} else {
stop("No ROI Symphony or GLPK plugin installed")
}
source('etric.R')
#warianty
alts <- read.table(file="alts.csv", sep="\t", header=TRUE)
rownames(alts) = alts[,1]
alts <- alts[,2:ncol(alts)]
#granice klas
profs <- read.table(file="profs.csv", sep="\t", header=FALSE)
rownames(profs) = profs[,1]
profs <- profs[,2:ncol(profs)]
colnames(profs) <- colnames(alts)
#przykładowe progi
thresholds <- matrix(c(
0, 4, 0, 12,
0, 1, 0, 2,
0, 100, 0, 200),ncol=4, byrow=TRUE)
# przykładowe przdziały do klas
assigs1 <- NULL#matrix(c(2, 1, 2, 5, 2, 3),ncol=3, byrow=TRUE)
monotonicity <- c(TRUE, TRUE, FALSE)
cardinalities <- NULL#matrix(c(1, 1, 2, 3, 1, 1), ncol=3, byrow=TRUE)
pairwiseComparisionsK <- matrix(c(1, 2, 0), ncol=3, byrow=TRUE)
pairwiseComparisionsL <- matrix(c(5, 2, 2), ncol=3, byrow=TRUE)
message("--- starting tests, iteration 1")
etri <- etric.init(alts, profs, assigs1, monotonicity, th=thresholds,
cardinalities, pairwiseComparisionsK, pairwiseComparisionsL)
etri$constr$lhs[str_detect(rownames(etri$constr$lhs),"PC*"),]
library(ROI.plugin.glpk)
library(ROI)
library(stringr) # for tests cases
solvers <- ROI_installed_solvers()
if (!is.na(solvers['symphony'])) {
.solver <<- 'symphony'
} else if (!is.na(solvers['glpk'])) {
.solver <<- 'glpk'
} else {
stop("No ROI Symphony or GLPK plugin installed")
}
source('etric.R')
#warianty
alts <- read.table(file="alts.csv", sep="\t", header=TRUE)
rownames(alts) = alts[,1]
alts <- alts[,2:ncol(alts)]
#granice klas
profs <- read.table(file="profs.csv", sep="\t", header=FALSE)
rownames(profs) = profs[,1]
profs <- profs[,2:ncol(profs)]
colnames(profs) <- colnames(alts)
#przykładowe progi
thresholds <- matrix(c(
0, 4, 0, 12,
0, 1, 0, 2,
0, 100, 0, 200),ncol=4, byrow=TRUE)
# przykładowe przdziały do klas
assigs1 <- NULL#matrix(c(2, 1, 2, 5, 2, 3),ncol=3, byrow=TRUE)
monotonicity <- c(TRUE, TRUE, FALSE)
cardinalities <- NULL#matrix(c(1, 1, 2, 3, 1, 1), ncol=3, byrow=TRUE)
pairwiseComparisionsK <- matrix(c(1, 2, 0), ncol=3, byrow=TRUE)
pairwiseComparisionsL <- matrix(c(5, 2, 2), ncol=3, byrow=TRUE)
message("--- starting tests, iteration 1")
etri <- etric.init(alts, profs, assigs1, monotonicity, th=thresholds,
cardinalities, pairwiseComparisionsK, pairwiseComparisionsL)
etri$constr$lhs[str_detect(rownames(etri$constr$lhs),"PC*"),]
library(ROI.plugin.glpk)
library(ROI)
library(stringr) # for tests cases
solvers <- ROI_installed_solvers()
if (!is.na(solvers['symphony'])) {
.solver <<- 'symphony'
} else if (!is.na(solvers['glpk'])) {
.solver <<- 'glpk'
} else {
stop("No ROI Symphony or GLPK plugin installed")
}
source('etric.R')
#warianty
alts <- read.table(file="alts.csv", sep="\t", header=TRUE)
rownames(alts) = alts[,1]
alts <- alts[,2:ncol(alts)]
#granice klas
profs <- read.table(file="profs.csv", sep="\t", header=FALSE)
rownames(profs) = profs[,1]
profs <- profs[,2:ncol(profs)]
colnames(profs) <- colnames(alts)
#przykładowe progi
thresholds <- matrix(c(
0, 4, 0, 12,
0, 1, 0, 2,
0, 100, 0, 200),ncol=4, byrow=TRUE)
# przykładowe przdziały do klas
assigs1 <- NULL#matrix(c(2, 1, 2, 5, 2, 3),ncol=3, byrow=TRUE)
monotonicity <- c(TRUE, TRUE, FALSE)
cardinalities <- NULL#matrix(c(1, 1, 2, 3, 1, 1), ncol=3, byrow=TRUE)
pairwiseComparisionsK <- matrix(c(1, 2, 0), ncol=3, byrow=TRUE)
pairwiseComparisionsL <- matrix(c(5, 2, 2), ncol=3, byrow=TRUE)
message("--- starting tests, iteration 1")
etri <- etric.init(alts, profs, assigs1, monotonicity, th=thresholds,
cardinalities, pairwiseComparisionsK, pairwiseComparisionsL)
etri$constr$lhs[str_detect(rownames(etri$constr$lhs),"PC*"),]
library(ROI.plugin.glpk)
library(ROI)
library(stringr) # for tests cases
solvers <- ROI_installed_solvers()
if (!is.na(solvers['symphony'])) {
.solver <<- 'symphony'
} else if (!is.na(solvers['glpk'])) {
.solver <<- 'glpk'
} else {
stop("No ROI Symphony or GLPK plugin installed")
}
source('etric.R')
#warianty
alts <- read.table(file="alts.csv", sep="\t", header=TRUE)
rownames(alts) = alts[,1]
alts <- alts[,2:ncol(alts)]
#granice klas
profs <- read.table(file="profs.csv", sep="\t", header=FALSE)
rownames(profs) = profs[,1]
profs <- profs[,2:ncol(profs)]
colnames(profs) <- colnames(alts)
#przykładowe progi
thresholds <- matrix(c(
0, 4, 0, 12,
0, 1, 0, 2,
0, 100, 0, 200),ncol=4, byrow=TRUE)
# przykładowe przdziały do klas
assigs1 <- NULL#matrix(c(2, 1, 2, 5, 2, 3),ncol=3, byrow=TRUE)
monotonicity <- c(TRUE, TRUE, FALSE)
cardinalities <- NULL#matrix(c(1, 1, 2, 3, 1, 1), ncol=3, byrow=TRUE)
pairwiseComparisionsK <- matrix(c(1, 2, 0), ncol=3, byrow=TRUE)
pairwiseComparisionsL <- matrix(c(5, 2, 2), ncol=3, byrow=TRUE)
message("--- starting tests, iteration 1")
etri <- etric.init(alts, profs, assigs1, monotonicity, th=thresholds,
cardinalities, pairwiseComparisionsK, pairwiseComparisionsL)
etri$constr$lhs[str_detect(rownames(etri$constr$lhs),"PCL11*"),]
library(ROI.plugin.glpk)
library(ROI)
library(stringr) # for tests cases
solvers <- ROI_installed_solvers()
if (!is.na(solvers['symphony'])) {
.solver <<- 'symphony'
} else if (!is.na(solvers['glpk'])) {
.solver <<- 'glpk'
} else {
stop("No ROI Symphony or GLPK plugin installed")
}
source('etric.R')
#warianty
alts <- read.table(file="alts.csv", sep="\t", header=TRUE)
rownames(alts) = alts[,1]
alts <- alts[,2:ncol(alts)]
#granice klas
profs <- read.table(file="profs.csv", sep="\t", header=FALSE)
rownames(profs) = profs[,1]
profs <- profs[,2:ncol(profs)]
colnames(profs) <- colnames(alts)
#przykładowe progi
thresholds <- matrix(c(
0, 4, 0, 12,
0, 1, 0, 2,
0, 100, 0, 200),ncol=4, byrow=TRUE)
# przykładowe przdziały do klas
assigs1 <- NULL#matrix(c(2, 1, 2, 5, 2, 3),ncol=3, byrow=TRUE)
monotonicity <- c(TRUE, TRUE, FALSE)
cardinalities <- NULL#matrix(c(1, 1, 2, 3, 1, 1), ncol=3, byrow=TRUE)
pairwiseComparisionsK <- matrix(c(1, 2, 0), ncol=3, byrow=TRUE)
pairwiseComparisionsL <- matrix(c(5, 2, 2), ncol=3, byrow=TRUE)
message("--- starting tests, iteration 1")
etri <- etric.init(alts, profs, assigs1, monotonicity, th=thresholds,
cardinalities, pairwiseComparisionsK, pairwiseComparisionsL)
etri$constr$lhs[str_detect(rownames(etri$constr$lhs),"PCL11\.*"),]
library(ROI.plugin.glpk)
library(ROI)
library(stringr) # for tests cases
solvers <- ROI_installed_solvers()
if (!is.na(solvers['symphony'])) {
.solver <<- 'symphony'
} else if (!is.na(solvers['glpk'])) {
.solver <<- 'glpk'
} else {
stop("No ROI Symphony or GLPK plugin installed")
}
source('etric.R')
#warianty
alts <- read.table(file="alts.csv", sep="\t", header=TRUE)
rownames(alts) = alts[,1]
alts <- alts[,2:ncol(alts)]
#granice klas
profs <- read.table(file="profs.csv", sep="\t", header=FALSE)
rownames(profs) = profs[,1]
profs <- profs[,2:ncol(profs)]
colnames(profs) <- colnames(alts)
#przykładowe progi
thresholds <- matrix(c(
0, 4, 0, 12,
0, 1, 0, 2,
0, 100, 0, 200),ncol=4, byrow=TRUE)
# przykładowe przdziały do klas
assigs1 <- NULL#matrix(c(2, 1, 2, 5, 2, 3),ncol=3, byrow=TRUE)
monotonicity <- c(TRUE, TRUE, FALSE)
cardinalities <- NULL#matrix(c(1, 1, 2, 3, 1, 1), ncol=3, byrow=TRUE)
pairwiseComparisionsK <- matrix(c(1, 2, 0), ncol=3, byrow=TRUE)
pairwiseComparisionsL <- matrix(c(5, 2, 2), ncol=3, byrow=TRUE)
message("--- starting tests, iteration 1")
etri <- etric.init(alts, profs, assigs1, monotonicity, th=thresholds,
cardinalities, pairwiseComparisionsK, pairwiseComparisionsL)
etri$constr$lhs[str_detect(rownames(etri$constr$lhs),"PCL11.*"),]
library(ROI.plugin.glpk)
library(ROI)
library(stringr) # for tests cases
solvers <- ROI_installed_solvers()
if (!is.na(solvers['symphony'])) {
.solver <<- 'symphony'
} else if (!is.na(solvers['glpk'])) {
.solver <<- 'glpk'
} else {
stop("No ROI Symphony or GLPK plugin installed")
}
source('etric.R')
#warianty
alts <- read.table(file="alts.csv", sep="\t", header=TRUE)
rownames(alts) = alts[,1]
alts <- alts[,2:ncol(alts)]
#granice klas
profs <- read.table(file="profs.csv", sep="\t", header=FALSE)
rownames(profs) = profs[,1]
profs <- profs[,2:ncol(profs)]
colnames(profs) <- colnames(alts)
#przykładowe progi
thresholds <- matrix(c(
0, 4, 0, 12,
0, 1, 0, 2,
0, 100, 0, 200),ncol=4, byrow=TRUE)
# przykładowe przdziały do klas
assigs1 <- NULL#matrix(c(2, 1, 2, 5, 2, 3),ncol=3, byrow=TRUE)
monotonicity <- c(TRUE, TRUE, FALSE)
cardinalities <- NULL#matrix(c(1, 1, 2, 3, 1, 1), ncol=3, byrow=TRUE)
pairwiseComparisionsK <- matrix(c(1, 2, 0), ncol=3, byrow=TRUE)
pairwiseComparisionsL <- matrix(c(5, 2, 2), ncol=3, byrow=TRUE)
message("--- starting tests, iteration 1")
etri <- etric.init(alts, profs, assigs1, monotonicity, th=thresholds,
cardinalities, pairwiseComparisionsK, pairwiseComparisionsL)
etri$constr$lhs[str_detect(rownames(etri$constr$lhs),"PCL12.*"),]
etricutils.createVarnames <- function(n, p, J, pcK, pcL){
varnames <- etricutils.e()
varnames <- c(varnames, etricutils.L())
varnames <- c(varnames, etricutils.w(J))
binaryvar <- c()
for (a in 1:n) {
for (b in 0:(p+1)) {
varnames <- c(varnames, etricutils.cAB(J, a, b))
}
}
for (b in 0:(p+1)) {
for (a in 1:n) {
varnames <- c(varnames, etricutils.cBA(J, b, a))
}
}
for (b in 1:(p+1)) {
varnames <- c(varnames, etricutils.cBB(J, b))
}
if(!is.null(pcK)){
for(i in 1:nrow(pcK)){
binaryvar <- c(binaryvar, etricutils.vABKH(pcK[i, 1], pcK[i, 2], pcK[i,3], 1:(p-pcK[i, 3])))
}
}
if(!is.null(pcL)){
for(i in 1:nrow(pcL)){
binaryvar <- c(binaryvar, etricutils.vABLH(pcL[i, 1], pcL[i, 2], pcL[i,3], 1:(p-pcL[i, 3])))
}
}
return(list(float=varnames, binary=binaryvar))
}
#----------------
#variable names:
etricutils.cAB <- function(j, a, b){
return(paste0('c', j, '(a', a, ',b', b, ')'))
}
etricutils.cBA <- function(j, b, a){
return(paste0('c', j, '(b', b, ',a', a, ')'))
}
etricutils.cBB <- function(j, h){
return(paste0('c', j, '(b', h, ',b', h+1, ')'))
}
etricutils.w <- function(j){
return(paste0('w',j))
}
etricutils.L <- function(){
return("L")
}
etricutils.e <- function(){
return("e")
}
etricutils.vABKH <- function(a, b, k, h){
return(paste0('v(a',a,',b',b,'>=',k,'h',h,')'))
}
etricutils.vABLH <- function(a, b, l, h){
return(paste0('v(a',a,',b',b,'<=',l,'h',h,')'))
}
etricutils.vAH <- function(a, h){
return(paste0('v(a',a,',h',h,')'))
}
etricutils.vAH1 <- function(a, h){
return(paste0('v(a',a,',h',h,',1)'))
}
etricutils.vAH2 <- function(a, h){
return(paste0('v(a',a,',h',h,',2)'))
}
etricutils.vAH3 <- function(a, h){
return(paste0('v(a',a,',h',h,',3)'))
}
library(ROI.plugin.glpk)
library(ROI)
library(stringr) # for tests cases
solvers <- ROI_installed_solvers()
if (!is.na(solvers['symphony'])) {
.solver <<- 'symphony'
} else if (!is.na(solvers['glpk'])) {
.solver <<- 'glpk'
} else {
stop("No ROI Symphony or GLPK plugin installed")
}
source('etric.R')
#warianty
alts <- read.table(file="alts.csv", sep="\t", header=TRUE)
rownames(alts) = alts[,1]
alts <- alts[,2:ncol(alts)]
#granice klas
profs <- read.table(file="profs.csv", sep="\t", header=FALSE)
rownames(profs) = profs[,1]
profs <- profs[,2:ncol(profs)]
colnames(profs) <- colnames(alts)
#przykładowe progi
thresholds <- matrix(c(
0, 4, 0, 12,
0, 1, 0, 2,
0, 100, 0, 200),ncol=4, byrow=TRUE)
# przykładowe przdziały do klas
assigs1 <- NULL#matrix(c(2, 1, 2, 5, 2, 3),ncol=3, byrow=TRUE)
monotonicity <- c(TRUE, TRUE, FALSE)
cardinalities <- NULL#matrix(c(1, 1, 2, 3, 1, 1), ncol=3, byrow=TRUE)
pairwiseComparisionsK <- matrix(c(1, 2, 0), ncol=3, byrow=TRUE)
pairwiseComparisionsL <- matrix(c(5, 2, 2), ncol=3, byrow=TRUE)
message("--- starting tests, iteration 1")
etri <- etric.init(alts, profs, assigs1, monotonicity, th=thresholds,
cardinalities, pairwiseComparisionsK, pairwiseComparisionsL)
etri$constr$lhs[str_detect(rownames(etri$constr$lhs),"PCL12.*"),]
