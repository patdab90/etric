rownames <- paste0('CC32.',1:rows)
lhs <- matrix(0, nrow=nrows, ncol=ncol(etric$constr$lhs), dimnames=list(rownames, colnames(etric$constr$lhs)))
dir <- matrix(">=", nrow=nrows, dimnames=list(rownames))
rhs <- matrix(-M, nrow=nrows, dimnames=list(rownames))
for(a in 1:etr){
for(h in 1:etric$p){
lhs[a,etricutils.vAH5(a, h)] <- -M
lhs[a,etricutils.cAB(J, a, h)] <- 1
lhs[a,etricutils.L()] <- -1
}
}
etric$constr$lhs <- rbind(etric$constr$lhs, lhs)
etric$constr$dir <- rbind(etric$constr$dir, dir)
etric$constr$rhs <- rbind(etric$constr$rhs, rhs)
return(etric)
}
createCC33Constraint <- function(etric){
J <- 1:etric$m
nrows <- etric$n * etric$p
rownames <- paste0('CC33.',1:rows)
lhs <- matrix(0, nrow=nrows, ncol=ncol(etric$constr$lhs), dimnames=list(rownames, colnames(etric$constr$lhs)))
dir <- matrix("<=", nrow=nrows, dimnames=list(rownames))
rhs <- matrix(M, nrow=nrows, dimnames=list(rownames))
for(a in 1:etr){
for(h in 1:etric$p){
lhs[a,etricutils.vAH6(a, h)] <- M
lhs[a,etricutils.cBA(J, h-1, a)] <- 1
lhs[a,etricutils.cAB(J, a, b)] <- -1
}
}
etric$constr$lhs <- rbind(etric$constr$lhs, lhs)
etric$constr$dir <- rbind(etric$constr$dir, dir)
etric$constr$rhs <- rbind(etric$constr$rhs, rhs)
return(etric)
}
createCC34Constraint <- function(etric){
J <- 1:etric$m
nrows <- etric$n * etric$p
rownames <- paste0('CC34.',1:rows)
lhs <- matrix(0, nrow=nrows, ncol=ncol(etric$constr$lhs), dimnames=list(rownames, colnames(etric$constr$lhs)))
dir <- matrix("==", nrow=nrows, dimnames=list(rownames))
rhs <- matrix(M, nrow=nrows, dimnames=list(rownames))
lhs[a,etricutils.vAH4(a, h)] <- 1
lhs[a,etricutils.vAH5(a, h)] <- 1
lhs[a,etricutils.vAH6(a, h)] <- 1
lhs[a,etricutils.vAH(a, h)] <- -1
etric$constr$lhs <- rbind(etric$constr$lhs, lhs)
etric$constr$dir <- rbind(etric$constr$dir, dir)
etric$constr$rhs <- rbind(etric$constr$rhs, rhs)
return(etric)
}
createCC4Constraint <- function(etric, card){
nrows <- nrow(card)
rownames <- paste0('CC4.',1:rows)
lhs <- matrix(0, nrow=nrows, ncol=ncol(etric$constr$lhs), dimnames=list(rownames, colnames(etric$constr$lhs)))
dir <- matrix(">=", nrow=nrows, dimnames=list(rownames))
rhs <- matrix(card[,2], nrow=nrows, dimnames=list(rownames))
for(h in 1:nrows){
lhs[h,etricutils.vAH(1:etric$n, card[h,1])] <- 1
}
etric$constr$lhs <- rbind(etric$constr$lhs, lhs)
etric$constr$dir <- rbind(etric$constr$dir, dir)
etric$constr$rhs <- rbind(etric$constr$rhs, rhs)
return(etric)
}
createCC5Constraint <- function(etric, card){
nrows <- nrow(card)
rownames <- paste0('CC5.',1:rows)
lhs <- matrix(0, nrow=nrows, ncol=ncol(etric$constr$lhs), dimnames=list(rownames, colnames(etric$constr$lhs)))
dir <- matrix("<=", nrow=nrows, dimnames=list(rownames))
rhs <- matrix(card[,3], nrow=nrows, dimnames=list(rownames))
for(h in 1:nrows){
lhs[h,etricutils.vAH(1:etric$n, card[h,1])] <- 1
}
etric$constr$lhs <- rbind(etric$constr$lhs, lhs)
etric$constr$dir <- rbind(etric$constr$dir, dir)
etric$constr$rhs <- rbind(etric$constr$rhs, rhs)
return(etric)
}
library(ROI.plugin.glpk)
library(ROI)
library(stringr) # for tests cases
solvers <- ROI_installed_solvers()
if (!is.na(solvers['symphony'])) {
.solver <<- 'symphony'
} else if (!is.na(solvers['glpk'])) {
.solver <<- 'glpk'
} else {
stop("No ROI Symphony or GLPK plugin installed")
}
source('etric.R')
#warianty
alts <- read.table(file="alts.csv", sep="\t", header=TRUE)
rownames(alts) = alts[,1]
alts <- alts[,2:ncol(alts)]
#granice klas
profs <- read.table(file="profs.csv", sep="\t", header=FALSE)
rownames(profs) = profs[,1]
profs <- profs[,2:ncol(profs)]
colnames(profs) <- colnames(alts)
#przykładowe progi
thresholds <- matrix(c(
0, 4, 0, 12,
0, 1, 0, 2,
0, 100, 0, 200),ncol=4, byrow=TRUE)
# przykładowe przdziały do klas
assigs1 <- NULL#matrix(c(2, 1, 2, 5, 2, 3),ncol=3, byrow=TRUE)
monotonicity <- c(TRUE, TRUE, FALSE)
cardinalities <- NULL#matrix(c(1, 1, 2, 3, 1, 1), ncol=3, byrow=TRUE)
pairwiseComparisionsK <- matrix(c(1, 2, 0), ncol=3, byrow=TRUE)
pairwiseComparisionsL <- matrix(c(5, 2, 2), ncol=3, byrow=TRUE)
message("--- starting tests, iteration 1")
etri <- etric.init(alts, profs, assigs1, monotonicity, th=thresholds,
cardinalities, pairwiseComparisionsK, pairwiseComparisionsL)
etri$constr$lhs[str_detect(rownames(etri$constr$lhs),"PCL12.*"),]
library(ROI.plugin.glpk)
library(ROI)
library(stringr) # for tests cases
solvers <- ROI_installed_solvers()
if (!is.na(solvers['symphony'])) {
.solver <<- 'symphony'
} else if (!is.na(solvers['glpk'])) {
.solver <<- 'glpk'
} else {
stop("No ROI Symphony or GLPK plugin installed")
}
source('etric.R')
#warianty
alts <- read.table(file="alts.csv", sep="\t", header=TRUE)
rownames(alts) = alts[,1]
alts <- alts[,2:ncol(alts)]
#granice klas
profs <- read.table(file="profs.csv", sep="\t", header=FALSE)
rownames(profs) = profs[,1]
profs <- profs[,2:ncol(profs)]
colnames(profs) <- colnames(alts)
#przykładowe progi
thresholds <- matrix(c(
0, 4, 0, 12,
0, 1, 0, 2,
0, 100, 0, 200),ncol=4, byrow=TRUE)
# przykładowe przdziały do klas
assigs1 <- NULL#matrix(c(2, 1, 2, 5, 2, 3),ncol=3, byrow=TRUE)
monotonicity <- c(TRUE, TRUE, FALSE)
cardinalities <- NULL#matrix(c(1, 1, 2, 3, 1, 1), ncol=3, byrow=TRUE)
pairwiseComparisionsK <- matrix(c(1, 2, 0), ncol=3, byrow=TRUE)
pairwiseComparisionsL <- matrix(c(5, 2, 2), ncol=3, byrow=TRUE)
message("--- starting tests, iteration 1")
etri <- etric.init(alts, profs, assigs1, monotonicity, th=thresholds,
cardinalities, pairwiseComparisionsK, pairwiseComparisionsL)
etri$constr$lhs[str_detect(rownames(etri$constr$lhs),"PCL12.*"),]
library(ROI.plugin.glpk)
library(ROI)
library(stringr) # for tests cases
solvers <- ROI_installed_solvers()
if (!is.na(solvers['symphony'])) {
.solver <<- 'symphony'
} else if (!is.na(solvers['glpk'])) {
.solver <<- 'glpk'
} else {
stop("No ROI Symphony or GLPK plugin installed")
}
source('etric.R')
#warianty
alts <- read.table(file="alts.csv", sep="\t", header=TRUE)
rownames(alts) = alts[,1]
alts <- alts[,2:ncol(alts)]
#granice klas
profs <- read.table(file="profs.csv", sep="\t", header=FALSE)
rownames(profs) = profs[,1]
profs <- profs[,2:ncol(profs)]
colnames(profs) <- colnames(alts)
#przykładowe progi
thresholds <- matrix(c(
0, 4, 0, 12,
0, 1, 0, 2,
0, 100, 0, 200),ncol=4, byrow=TRUE)
# przykładowe przdziały do klas
assigs1 <- NULL#matrix(c(2, 1, 2, 5, 2, 3),ncol=3, byrow=TRUE)
monotonicity <- c(TRUE, TRUE, FALSE)
cardinalities <- NULL#matrix(c(1, 1, 2, 3, 1, 1), ncol=3, byrow=TRUE)
pairwiseComparisionsK <- matrix(c(1, 2, 0), ncol=3, byrow=TRUE)
pairwiseComparisionsL <- matrix(c(5, 2, 2), ncol=3, byrow=TRUE)
message("--- starting tests, iteration 1")
etri <- etric.init(alts, profs, assigs1, monotonicity, th=thresholds,
cardinalities, pairwiseComparisionsK, pairwiseComparisionsL)
etri$constr$lhs[str_detect(rownames(etri$constr$lhs),"PCL12.*"),]
library(ROI.plugin.glpk)
library(ROI)
library(stringr) # for tests cases
solvers <- ROI_installed_solvers()
if (!is.na(solvers['symphony'])) {
.solver <<- 'symphony'
} else if (!is.na(solvers['glpk'])) {
.solver <<- 'glpk'
} else {
stop("No ROI Symphony or GLPK plugin installed")
}
source('etric.R')
#warianty
alts <- read.table(file="alts.csv", sep="\t", header=TRUE)
rownames(alts) = alts[,1]
alts <- alts[,2:ncol(alts)]
#granice klas
profs <- read.table(file="profs.csv", sep="\t", header=FALSE)
rownames(profs) = profs[,1]
profs <- profs[,2:ncol(profs)]
colnames(profs) <- colnames(alts)
#przykładowe progi
thresholds <- matrix(c(
0, 4, 0, 12,
0, 1, 0, 2,
0, 100, 0, 200),ncol=4, byrow=TRUE)
# przykładowe przdziały do klas
assigs1 <- NULL#matrix(c(2, 1, 2, 5, 2, 3),ncol=3, byrow=TRUE)
monotonicity <- c(TRUE, TRUE, FALSE)
cardinalities <- NULL#matrix(c(1, 1, 2, 3, 1, 1), ncol=3, byrow=TRUE)
pairwiseComparisionsK <- matrix(c(1, 2, 0), ncol=3, byrow=TRUE)
pairwiseComparisionsL <- matrix(c(5, 2, 2), ncol=3, byrow=TRUE)
message("--- starting tests, iteration 1")
etri <- etric.init(alts, profs, assigs1, monotonicity, th=thresholds,
cardinalities, pairwiseComparisionsK, pairwiseComparisionsL)
etri$constr$lhs[str_detect(rownames(etri$constr$lhs),"PCL12.*"),]
library(ROI.plugin.glpk)
library(ROI)
library(stringr) # for tests cases
solvers <- ROI_installed_solvers()
if (!is.na(solvers['symphony'])) {
.solver <<- 'symphony'
} else if (!is.na(solvers['glpk'])) {
.solver <<- 'glpk'
} else {
stop("No ROI Symphony or GLPK plugin installed")
}
source('etric.R')
#warianty
alts <- read.table(file="alts.csv", sep="\t", header=TRUE)
rownames(alts) = alts[,1]
alts <- alts[,2:ncol(alts)]
#granice klas
profs <- read.table(file="profs.csv", sep="\t", header=FALSE)
rownames(profs) = profs[,1]
profs <- profs[,2:ncol(profs)]
colnames(profs) <- colnames(alts)
#przykładowe progi
thresholds <- matrix(c(
0, 4, 0, 12,
0, 1, 0, 2,
0, 100, 0, 200),ncol=4, byrow=TRUE)
# przykładowe przdziały do klas
assigs1 <- NULL#matrix(c(2, 1, 2, 5, 2, 3),ncol=3, byrow=TRUE)
monotonicity <- c(TRUE, TRUE, FALSE)
cardinalities <- NULL#matrix(c(1, 1, 2, 3, 1, 1), ncol=3, byrow=TRUE)
pairwiseComparisionsK <- matrix(c(1, 2, 0), ncol=3, byrow=TRUE)
pairwiseComparisionsL <- matrix(c(5, 2, 2), ncol=3, byrow=TRUE)
message("--- starting tests, iteration 1")
etri <- etric.init(alts, profs, assigs1, monotonicity, th=thresholds,
cardinalities, pairwiseComparisionsK, pairwiseComparisionsL)
etri$constr$lhs[str_detect(rownames(etri$constr$lhs),"PCL12.*"),]
library(ROI.plugin.glpk)
library(ROI)
library(stringr) # for tests cases
solvers <- ROI_installed_solvers()
if (!is.na(solvers['symphony'])) {
.solver <<- 'symphony'
} else if (!is.na(solvers['glpk'])) {
.solver <<- 'glpk'
} else {
stop("No ROI Symphony or GLPK plugin installed")
}
source('etric.R')
#warianty
alts <- read.table(file="alts.csv", sep="\t", header=TRUE)
rownames(alts) = alts[,1]
alts <- alts[,2:ncol(alts)]
#granice klas
profs <- read.table(file="profs.csv", sep="\t", header=FALSE)
rownames(profs) = profs[,1]
profs <- profs[,2:ncol(profs)]
colnames(profs) <- colnames(alts)
#przykładowe progi
thresholds <- matrix(c(
0, 4, 0, 12,
0, 1, 0, 2,
0, 100, 0, 200),ncol=4, byrow=TRUE)
# przykładowe przdziały do klas
assigs1 <- NULL#matrix(c(2, 1, 2, 5, 2, 3),ncol=3, byrow=TRUE)
monotonicity <- c(TRUE, TRUE, FALSE)
cardinalities <- NULL#matrix(c(1, 1, 2, 3, 1, 1), ncol=3, byrow=TRUE)
pairwiseComparisionsK <- matrix(c(1, 2, 0), ncol=3, byrow=TRUE)
pairwiseComparisionsL <- matrix(c(5, 2, 2), ncol=3, byrow=TRUE)
message("--- starting tests, iteration 1")
etri <- etric.init(alts, profs, assigs1, monotonicity, th=thresholds,
cardinalities, pairwiseComparisionsK, pairwiseComparisionsL)
etri$constr$lhs[str_detect(rownames(etri$constr$lhs),"PCL12.*"),]
library(ROI.plugin.glpk)
library(ROI)
library(stringr) # for tests cases
solvers <- ROI_installed_solvers()
if (!is.na(solvers['symphony'])) {
.solver <<- 'symphony'
} else if (!is.na(solvers['glpk'])) {
.solver <<- 'glpk'
} else {
stop("No ROI Symphony or GLPK plugin installed")
}
source('etric.R')
#warianty
alts <- read.table(file="alts.csv", sep="\t", header=TRUE)
rownames(alts) = alts[,1]
alts <- alts[,2:ncol(alts)]
#granice klas
profs <- read.table(file="profs.csv", sep="\t", header=FALSE)
rownames(profs) = profs[,1]
profs <- profs[,2:ncol(profs)]
colnames(profs) <- colnames(alts)
#przykładowe progi
thresholds <- matrix(c(
0, 4, 0, 12,
0, 1, 0, 2,
0, 100, 0, 200),ncol=4, byrow=TRUE)
# przykładowe przdziały do klas
assigs1 <- NULL#matrix(c(2, 1, 2, 5, 2, 3),ncol=3, byrow=TRUE)
monotonicity <- c(TRUE, TRUE, FALSE)
cardinalities <- NULL#matrix(c(1, 1, 2, 3, 1, 1), ncol=3, byrow=TRUE)
pairwiseComparisionsK <- matrix(c(1, 2, 0), ncol=3, byrow=TRUE)
pairwiseComparisionsL <- matrix(c(5, 2, 2), ncol=3, byrow=TRUE)
message("--- starting tests, iteration 1")
etri <- etric.init(alts, profs, assigs1, monotonicity, th=thresholds,
cardinalities, pairwiseComparisionsK, pairwiseComparisionsL)
etri$constr$lhs[str_detect(rownames(etri$constr$lhs),"PCL12.*"),]
library(ROI.plugin.glpk)
library(ROI)
library(stringr) # for tests cases
solvers <- ROI_installed_solvers()
if (!is.na(solvers['symphony'])) {
.solver <<- 'symphony'
} else if (!is.na(solvers['glpk'])) {
.solver <<- 'glpk'
} else {
stop("No ROI Symphony or GLPK plugin installed")
}
source('etric.R')
#warianty
alts <- read.table(file="alts.csv", sep="\t", header=TRUE)
rownames(alts) = alts[,1]
alts <- alts[,2:ncol(alts)]
#granice klas
profs <- read.table(file="profs.csv", sep="\t", header=FALSE)
rownames(profs) = profs[,1]
profs <- profs[,2:ncol(profs)]
colnames(profs) <- colnames(alts)
#przykładowe progi
thresholds <- matrix(c(
0, 4, 0, 12,
0, 1, 0, 2,
0, 100, 0, 200),ncol=4, byrow=TRUE)
# przykładowe przdziały do klas
assigs1 <- NULL#matrix(c(2, 1, 2, 5, 2, 3),ncol=3, byrow=TRUE)
monotonicity <- c(TRUE, TRUE, FALSE)
cardinalities <- NULL#matrix(c(1, 1, 2, 3, 1, 1), ncol=3, byrow=TRUE)
pairwiseComparisionsK <- matrix(c(1, 2, 0), ncol=3, byrow=TRUE)
pairwiseComparisionsL <- matrix(c(5, 2, 2), ncol=3, byrow=TRUE)
message("--- starting tests, iteration 1")
etri <- etric.init(alts, profs, assigs1, monotonicity, th=thresholds,
cardinalities, pairwiseComparisionsK, pairwiseComparisionsL)
etri$constr$lhs[str_detect(rownames(etri$constr$lhs),"PCL12.*"),]
library(ROI.plugin.glpk)
library(ROI)
library(stringr) # for tests cases
solvers <- ROI_installed_solvers()
if (!is.na(solvers['symphony'])) {
.solver <<- 'symphony'
} else if (!is.na(solvers['glpk'])) {
.solver <<- 'glpk'
} else {
stop("No ROI Symphony or GLPK plugin installed")
}
source('etric.R')
#warianty
alts <- read.table(file="alts.csv", sep="\t", header=TRUE)
rownames(alts) = alts[,1]
alts <- alts[,2:ncol(alts)]
#granice klas
profs <- read.table(file="profs.csv", sep="\t", header=FALSE)
rownames(profs) = profs[,1]
profs <- profs[,2:ncol(profs)]
colnames(profs) <- colnames(alts)
#przykładowe progi
thresholds <- matrix(c(
0, 4, 0, 12,
0, 1, 0, 2,
0, 100, 0, 200),ncol=4, byrow=TRUE)
# przykładowe przdziały do klas
assigs1 <- NULL#matrix(c(2, 1, 2, 5, 2, 3),ncol=3, byrow=TRUE)
monotonicity <- c(TRUE, TRUE, FALSE)
cardinalities <- NULL#matrix(c(1, 1, 2, 3, 1, 1), ncol=3, byrow=TRUE)
pairwiseComparisionsK <- matrix(c(1, 2, 0), ncol=3, byrow=TRUE)
pairwiseComparisionsL <- matrix(c(5, 2, 2), ncol=3, byrow=TRUE)
message("--- starting tests, iteration 1")
etri <- etric.init(alts, profs, assigs1, monotonicity, th=thresholds,
cardinalities, pairwiseComparisionsK, pairwiseComparisionsL)
etri$constr$lhs[str_detect(rownames(etri$constr$lhs),"PCL12.*"),]
library(ROI.plugin.glpk)
library(ROI)
library(stringr) # for tests cases
solvers <- ROI_installed_solvers()
if (!is.na(solvers['symphony'])) {
.solver <<- 'symphony'
} else if (!is.na(solvers['glpk'])) {
.solver <<- 'glpk'
} else {
stop("No ROI Symphony or GLPK plugin installed")
}
source('etric.R')
#warianty
alts <- read.table(file="alts.csv", sep="\t", header=TRUE)
rownames(alts) = alts[,1]
alts <- alts[,2:ncol(alts)]
#granice klas
profs <- read.table(file="profs.csv", sep="\t", header=FALSE)
rownames(profs) = profs[,1]
profs <- profs[,2:ncol(profs)]
colnames(profs) <- colnames(alts)
#przykładowe progi
thresholds <- matrix(c(
0, 4, 0, 12,
0, 1, 0, 2,
0, 100, 0, 200),ncol=4, byrow=TRUE)
# przykładowe przdziały do klas
assigs1 <- NULL#matrix(c(2, 1, 2, 5, 2, 3),ncol=3, byrow=TRUE)
monotonicity <- c(TRUE, TRUE, FALSE)
cardinalities <- NULL#matrix(c(1, 1, 2, 3, 1, 1), ncol=3, byrow=TRUE)
pairwiseComparisionsK <- matrix(c(1, 2, 0), ncol=3, byrow=TRUE)
pairwiseComparisionsL <- matrix(c(5, 2, 2), ncol=3, byrow=TRUE)
message("--- starting tests, iteration 1")
etri <- etric.init(alts, profs, assigs1, monotonicity, th=thresholds,
cardinalities, pairwiseComparisionsK, pairwiseComparisionsL)
etri$constr$lhs[str_detect(rownames(etri$constr$lhs),"PCL12.*"),]
etricutils.cAB(1, 2, 3)
library(ROI.plugin.glpk)
library(ROI)
library(stringr) # for tests cases
solvers <- ROI_installed_solvers()
if (!is.na(solvers['symphony'])) {
.solver <<- 'symphony'
} else if (!is.na(solvers['glpk'])) {
.solver <<- 'glpk'
} else {
stop("No ROI Symphony or GLPK plugin installed")
}
source('etric.R')
#warianty
alts <- read.table(file="alts.csv", sep="\t", header=TRUE)
rownames(alts) = alts[,1]
alts <- alts[,2:ncol(alts)]
#granice klas
profs <- read.table(file="profs.csv", sep="\t", header=FALSE)
rownames(profs) = profs[,1]
profs <- profs[,2:ncol(profs)]
colnames(profs) <- colnames(alts)
#przykładowe progi
thresholds <- matrix(c(
0, 4, 0, 12,
0, 1, 0, 2,
0, 100, 0, 200),ncol=4, byrow=TRUE)
# przykładowe przdziały do klas
assigs1 <- NULL#matrix(c(2, 1, 2, 5, 2, 3),ncol=3, byrow=TRUE)
monotonicity <- c(TRUE, TRUE, FALSE)
cardinalities <- NULL#matrix(c(1, 1, 2, 3, 1, 1), ncol=3, byrow=TRUE)
pairwiseComparisionsK <- matrix(c(1, 2, 0), ncol=3, byrow=TRUE)
pairwiseComparisionsL <- matrix(c(5, 2, 2), ncol=3, byrow=TRUE)
message("--- starting tests, iteration 1")
etri <- etric.init(alts, profs, assigs1, monotonicity, th=thresholds,
cardinalities, pairwiseComparisionsK, pairwiseComparisionsL)
etri$constr$lhs[str_detect(rownames(etri$constr$lhs),"PCL12.*"),]
library(ROI.plugin.glpk)
library(ROI)
library(stringr) # for tests cases
solvers <- ROI_installed_solvers()
if (!is.na(solvers['symphony'])) {
.solver <<- 'symphony'
} else if (!is.na(solvers['glpk'])) {
.solver <<- 'glpk'
} else {
stop("No ROI Symphony or GLPK plugin installed")
}
source('etric.R')
#warianty
alts <- read.table(file="alts.csv", sep="\t", header=TRUE)
rownames(alts) = alts[,1]
alts <- alts[,2:ncol(alts)]
#granice klas
profs <- read.table(file="profs.csv", sep="\t", header=FALSE)
rownames(profs) = profs[,1]
profs <- profs[,2:ncol(profs)]
colnames(profs) <- colnames(alts)
#przykładowe progi
thresholds <- matrix(c(
0, 4, 0, 12,
0, 1, 0, 2,
0, 100, 0, 200),ncol=4, byrow=TRUE)
# przykładowe przdziały do klas
assigs1 <- NULL#matrix(c(2, 1, 2, 5, 2, 3),ncol=3, byrow=TRUE)
monotonicity <- c(TRUE, TRUE, FALSE)
cardinalities <- NULL#matrix(c(1, 1, 2, 3, 1, 1), ncol=3, byrow=TRUE)
pairwiseComparisionsK <- matrix(c(1, 2, 0), ncol=3, byrow=TRUE)
pairwiseComparisionsL <- matrix(c(5, 2, 2), ncol=3, byrow=TRUE)
message("--- starting tests, iteration 1")
etri <- etric.init(alts, profs, assigs1, monotonicity, th=thresholds,
cardinalities, pairwiseComparisionsK, pairwiseComparisionsL)
etri$constr$lhs[str_detect(rownames(etri$constr$lhs),"PCL12.*"),]
