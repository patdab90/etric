cardinalities <- NULL#matrix(c(1, 1, -1,
#  2, 2, 3,
# 3, 1, -1), ncol=3, byrow=TRUE)
pairwiseComparisionsK <- NULL#matrix(c(1, 2, 1), ncol=3, byrow=TRUE)
pairwiseComparisionsL <- NULL#matrix(c(5, 2, 2), ncol=3, byrow=TRUE)
message("--- starting tests, iteration 1")
etri <- etric.init(alts, profs, assigns, monotonicity, th=thresholds,
cardinalities, pairwiseComparisionsK, pairwiseComparisionsL)
etric.isFeasible(etri, .solver)
p <- etric.possibleAssigment(etric=etri, .solver)
p
n <- etric.necessaryAssigment(etri, .solver)
n
#r <- etric.necessaryPreferenceRelation(etri, .solver)
#r
cc <- etric.classCardinalities(etri, FALSE, .solver)
cc
#etri$constr$lhs[str_detect(rownames(etri$constr$lhs),"PCL12.*"),]
library(ROI.plugin.glpk)
library(ROI)
solvers <- ROI_installed_solvers()
if (!is.na(solvers['symphony'])) {
.solver <<- 'symphony'
} else if (!is.na(solvers['glpk'])) {
.solver <<- 'glpk'
} else {
stop("No ROI Symphony or GLPK plugin installed")
}
source('etric.R')
#warianty
alts <- read.table(file="alts_test.csv", sep=",", header=TRUE)
rownames(alts) = alts[,1]
alts <- alts[,2:ncol(alts)]
#granice klas
profs <- read.table(file="profs_test.csv", sep=",", header=FALSE)
rownames(profs) = profs[,1]
profs <- profs[,2:ncol(profs)]
colnames(profs) <- colnames(alts)
thresholds <- matrix(c(
0, 0.01, 0, 0.02,
0, 0, 1.9, 0,
0, 0, 1.9, 0,
0, 0, 1.9, 0,
0, 0, 2, 0),ncol=4, byrow=TRUE)
as <- matrix(c(
1, 1,
8, 2,
13, 2,
16, 3,
40, 4)
, ncol=2, byrow=TRUE)
assigs1 <- matrix(c(2, 1, 2,
5, 3, 3),ncol=3, byrow=TRUE)
assigns <- matrix(c(as[,1], as[,2], as[,2]), ncol=3, nrow=nrow(as), dimnames=list(rownames(alts)[as[,1]]))
monotonicity <- c(TRUE, TRUE, TRUE, TRUE, TRUE)
cardinalities <- NULL#matrix(c(1, 1, -1,
#  2, 2, 3,
# 3, 1, -1), ncol=3, byrow=TRUE)
pairwiseComparisionsK <- NULL#matrix(c(1, 2, 1), ncol=3, byrow=TRUE)
pairwiseComparisionsL <- NULL#matrix(c(5, 2, 2), ncol=3, byrow=TRUE)
message("--- starting tests, iteration 1")
etri <- etric.init(alts, profs, assigns, monotonicity, th=thresholds,
cardinalities, pairwiseComparisionsK, pairwiseComparisionsL)
etric.isFeasible(etri, .solver)
p <- etric.possibleAssigment(etric=etri, .solver)
p
n <- etric.necessaryAssigment(etri, .solver)
n
#r <- etric.necessaryPreferenceRelation(etri, .solver)
#r
cc <- etric.classCardinalities(etri, FALSE, .solver)
cc
#etri$constr$lhs[str_detect(rownames(etri$constr$lhs),"PCL12.*"),]
View(assigns)
library(ROI.plugin.glpk)
library(ROI)
solvers <- ROI_installed_solvers()
if (!is.na(solvers['symphony'])) {
.solver <<- 'symphony'
} else if (!is.na(solvers['glpk'])) {
.solver <<- 'glpk'
} else {
stop("No ROI Symphony or GLPK plugin installed")
}
source('etric.R')
#warianty
alts <- read.table(file="alts_test.csv", sep=",", header=TRUE)
rownames(alts) = alts[,1]
alts <- alts[,2:ncol(alts)]
#granice klas
profs <- read.table(file="profs_test.csv", sep=",", header=FALSE)
rownames(profs) = profs[,1]
profs <- profs[,2:ncol(profs)]
colnames(profs) <- colnames(alts)
thresholds <- matrix(c(
0, 0.01, 0, 0.02,
0, 0, 1.9, 0,
0, 0, 1.9, 0,
0, 0, 1.9, 0,
0, 0, 2, 0),ncol=4, byrow=TRUE)
as <- matrix(c(
1, 1,
8, 2,
13, 2,
16, 3,
40, 4)
, ncol=2, byrow=TRUE)
assigns <- matrix(c(as[,1], as[,2], as[,2]), ncol=3, nrow=nrow(as), dimnames=list(rownames(alts)[as[,1]]))
monotonicity <- c(TRUE, TRUE, TRUE, TRUE, TRUE)
cardinalities <- NULL#matrix(c(1, 1, -1,
#  2, 2, 3,
# 3, 1, -1), ncol=3, byrow=TRUE)
pairwiseComparisionsK <- NULL#matrix(c(1, 2, 1), ncol=3, byrow=TRUE)
pairwiseComparisionsL <- NULL#matrix(c(5, 2, 2), ncol=3, byrow=TRUE)
message("--- starting tests, iteration 1")
etri <- etric.init(alts, profs, assigns, monotonicity, th=thresholds,
cardinalities, pairwiseComparisionsK, pairwiseComparisionsL)
etric.isFeasible(etri, .solver)
p <- etric.possibleAssigment(etric=etri, .solver)
p
n <- etric.necessaryAssigment(etri, .solver)
n
#r <- etric.necessaryPreferenceRelation(etri, .solver)
#r
cc <- etric.classCardinalities(etri, FALSE, .solver)
cc
#etri$constr$lhs[str_detect(rownames(etri$constr$lhs),"PCL12.*"),]
View(assigns)
library(ROI.plugin.glpk)
library(ROI)
solvers <- ROI_installed_solvers()
if (!is.na(solvers['symphony'])) {
.solver <<- 'symphony'
} else if (!is.na(solvers['glpk'])) {
.solver <<- 'glpk'
} else {
stop("No ROI Symphony or GLPK plugin installed")
}
source('etric.R')
#warianty
alts <- read.table(file="alts_test.csv", sep=",", header=TRUE)
rownames(alts) = alts[,1]
alts <- alts[,2:ncol(alts)]
#granice klas
profs <- read.table(file="profs_test.csv", sep=",", header=FALSE)
rownames(profs) = profs[,1]
profs <- profs[,2:ncol(profs)]
colnames(profs) <- colnames(alts)
thresholds <- matrix(c(
0, 0.01, 0, 0.02,
0, 0, 1.9, 0,
0, 0, 1.9, 0,
0, 0, 1.9, 0,
0, 0, 2, 0),ncol=4, byrow=TRUE)
as <- matrix(c(
1, 1,
8, 2,
13, 2,
16, 3,
40, 4)
, ncol=2, byrow=TRUE)
assigns <- matrix(c(as[,1], as[,2], as[,2]), ncol=3, nrow=nrow(as))
monotonicity <- c(TRUE, TRUE, TRUE, TRUE, TRUE)
cardinalities <- NULL#matrix(c(1, 1, -1,
#  2, 2, 3,
# 3, 1, -1), ncol=3, byrow=TRUE)
pairwiseComparisionsK <- NULL#matrix(c(1, 2, 1), ncol=3, byrow=TRUE)
pairwiseComparisionsL <- NULL#matrix(c(5, 2, 2), ncol=3, byrow=TRUE)
message("--- starting tests, iteration 1")
etri <- etric.init(alts, profs, assigns, monotonicity, th=thresholds,
cardinalities, pairwiseComparisionsK, pairwiseComparisionsL)
etric.isFeasible(etri, .solver)
p <- etric.possibleAssigment(etric=etri, .solver)
p
n <- etric.necessaryAssigment(etri, .solver)
n
#r <- etric.necessaryPreferenceRelation(etri, .solver)
#r
cc <- etric.classCardinalities(etri, FALSE, .solver)
cc
#etri$constr$lhs[str_detect(rownames(etri$constr$lhs),"PCL12.*"),]
View(alts)
View(alts)
min(alts[,1])
apply(alts, 1, function(x) min(x[x!=0]) )
?apply
apply(alts, 2, function(x) min(x[x!=0]) )
apply(alts, 2, function(x) min(x) )
apply(alts, 2, function(x) max(x) )
etric.createBorderProfiles <- function(alternatives, profiles){
return(matrix(apply(alternatives, 2, function(x) min(x) ),
profiles,
apply(alternatives, 2, function(x) max(x) )
ncol=ncol(profiles),
nrow=nrow(profiles)+2,
dimnames = list(rownames(profiles), colnames(profiles))))
}
etric.createBorderProfiles <- function(alternatives, profiles){
return(matrix(apply(alternatives, 2, function(x) min(x) ),
profiles,
apply(alternatives, 2, function(x) max(x) ),
ncol=ncol(profiles),
nrow=nrow(profiles)+2,
dimnames = list(rownames(profiles), colnames(profiles))))
}
etric.createBorderProfiles(alts, profs)
View(profs)
View(profs)
c(profs)
t(profs)
etric.createBorderProfiles(alts, profs)
etric.createBorderProfiles <- function(alternatives, profiles){
return(matrix(c(apply(alternatives, 2, function(x) min(x) ), t(profiles), apply(alternatives, 2, function(x) max(x) )),
ncol=ncol(profiles),
nrow=nrow(profiles)+2, byrow=TRUE,
dimnames = list(rownames(profiles), colnames(profiles))
))
}
etric.createBorderProfiles(alts, profs)
etric.createBorderProfiles <- function(alternatives, profiles){
return(matrix(c(apply(alternatives, 2, function(x) min(x) ), t(profiles), apply(alternatives, 2, function(x) max(x) )),
ncol=ncol(profiles),
nrow=nrow(profiles)+2, byrow=TRUE,
dimnames = list("b0",c(rownames(profiles),"bt"), colnames(profiles))
))
}
etric.createBorderProfiles(alts, profs)
etric.createBorderProfiles <- function(alternatives, profiles){
return(matrix(c(apply(alternatives, 2, function(x) min(x) ), t(profiles), apply(alternatives, 2, function(x) max(x) )),
ncol=ncol(profiles),
nrow=nrow(profiles)+2, byrow=TRUE,
dimnames = list(c("b0",rownames(profiles),"bt"), colnames(profiles))
))
}
etric.createBorderProfiles <- function(alternatives, profiles){
return(matrix(c(apply(alternatives, 2, function(x) min(x) ), t(profiles), apply(alternatives, 2, function(x) max(x) )),
ncol=ncol(profiles),
nrow=nrow(profiles)+2, byrow=TRUE,
dimnames = list(c("b0",rownames(profiles),"bt"), colnames(profiles))
))
}
etric.createBorderProfiles(alts, profs)
View(alts)
View(alts)
?rbind
etric.createBorderProfiles <- function(alternatives, profiles, monotocity){
minp <- rep(0,ncol(alternatives))
maxp <- rep(0,ncol(alternatives))
for(c in 1:ncol(alternatives)){
if(monotocity[c]){
minp[c] <- min(alternatives[,c])
maxp[c] <- max(alternatives[,c])
}else{
minp[c] <- max(alternatives[,c])
maxp[c] <- min(alternatives[,c])
}
}
return(rbind(minp,profiles,maxp))
}
etric.createBorderProfiles(alts, profs, monotonicity)
library(ROI.plugin.glpk)
library(ROI)
solvers <- ROI_installed_solvers()
if (!is.na(solvers['symphony'])) {
.solver <<- 'symphony'
} else if (!is.na(solvers['glpk'])) {
.solver <<- 'glpk'
} else {
stop("No ROI Symphony or GLPK plugin installed")
}
source('etric.R')
#warianty
alts <- read.table(file="alts_test.csv", sep=",", header=TRUE)
rownames(alts) = alts[,1]
alts <- alts[,2:ncol(alts)]
#granice klas
profs <- read.table(file="profs_test.csv", sep=",", header=FALSE)
rownames(profs) = profs[,1]
profs <- profs[,2:ncol(profs)]
colnames(profs) <- colnames(alts)
thresholds <- matrix(c(
0, 0.01, 0, 0.02,
0, 0, 1.9, 0,
0, 0, 1.9, 0,
0, 0, 1.9, 0,
0, 0, 2, 0),ncol=4, byrow=TRUE)
as <- matrix(c(
1, 1,
8, 2,
13, 2,
16, 3,
40, 4)
, ncol=2, byrow=TRUE)
assigns <- matrix(c(as[,1], as[,2], as[,2]), ncol=3, nrow=nrow(as))
monotonicity <- c(TRUE, TRUE, TRUE, TRUE, TRUE)
cardinalities <- NULL#matrix(c(1, 1, -1,
#  2, 2, 3,
# 3, 1, -1), ncol=3, byrow=TRUE)
pairwiseComparisionsK <- NULL#matrix(c(1, 2, 1), ncol=3, byrow=TRUE)
pairwiseComparisionsL <- NULL#matrix(c(5, 2, 2), ncol=3, byrow=TRUE)
message("--- starting tests, iteration 1")
profs <- etric.createBorderProfiles(alts,profs,monotonicity)
etri <- etric.init(alts, profs, assigns, monotonicity, th=thresholds,
cardinalities, pairwiseComparisionsK, pairwiseComparisionsL)
etric.isFeasible(etri, .solver)
p <- etric.possibleAssigment(etric=etri, .solver)
library(ROI.plugin.glpk)
library(ROI)
solvers <- ROI_installed_solvers()
if (!is.na(solvers['symphony'])) {
.solver <<- 'symphony'
} else if (!is.na(solvers['glpk'])) {
.solver <<- 'glpk'
} else {
stop("No ROI Symphony or GLPK plugin installed")
}
source('etric.R')
#warianty
alts <- read.table(file="alts_test.csv", sep=",", header=TRUE)
rownames(alts) = alts[,1]
alts <- alts[,2:ncol(alts)]
#granice klas
profs <- read.table(file="profs_test.csv", sep=",", header=FALSE)
rownames(profs) = profs[,1]
profs <- profs[,2:ncol(profs)]
colnames(profs) <- colnames(alts)
thresholds <- matrix(c(
0, 0.01, 0, 0.02,
0, 0, 1.9, 0,
0, 0, 1.9, 0,
0, 0, 1.9, 0,
0, 0, 2, 0),ncol=4, byrow=TRUE)
as <- matrix(c(
1, 1,
8, 2,
13, 2,
16, 3,
40, 4)
, ncol=2, byrow=TRUE)
assigns <- matrix(c(as[,1], as[,2], as[,2]), ncol=3, nrow=nrow(as))
monotonicity <- c(FALSE, FALSE, FALSE, FALSE, FALSE)
cardinalities <- NULL#matrix(c(1, 1, -1,
#  2, 2, 3,
# 3, 1, -1), ncol=3, byrow=TRUE)
pairwiseComparisionsK <- NULL#matrix(c(1, 2, 1), ncol=3, byrow=TRUE)
pairwiseComparisionsL <- NULL#matrix(c(5, 2, 2), ncol=3, byrow=TRUE)
message("--- starting tests, iteration 1")
profs <- etric.createBorderProfiles(alts,profs,monotonicity)
etri <- etric.init(alts, profs, assigns, monotonicity, th=thresholds,
cardinalities, pairwiseComparisionsK, pairwiseComparisionsL)
etric.isFeasible(etri, .solver)
p <- etric.possibleAssigment(etric=etri, .solver)
p
n <- etric.necessaryAssigment(etri, .solver)
n
#r <- etric.necessaryPreferenceRelation(etri, .solver)
#r
cc <- etric.classCardinalities(etri, FALSE, .solver)
cc
#etri$constr$lhs[str_detect(rownames(etri$constr$lhs),"PCL12.*"),]
library(ROI.plugin.glpk)
library(ROI)
solvers <- ROI_installed_solvers()
if (!is.na(solvers['symphony'])) {
.solver <<- 'symphony'
} else if (!is.na(solvers['glpk'])) {
.solver <<- 'glpk'
} else {
stop("No ROI Symphony or GLPK plugin installed")
}
source('etric.R')
#warianty
alts <- read.table(file="alts_test.csv", sep=",", header=TRUE)
rownames(alts) = alts[,1]
alts <- alts[,2:ncol(alts)]
#granice klas
profs <- read.table(file="profs_test.csv", sep=",", header=FALSE)
rownames(profs) = profs[,1]
profs <- profs[,2:ncol(profs)]
colnames(profs) <- colnames(alts)
thresholds <- matrix(c(
0, 0.01, 0, 0.02,
0, 0, 1.9, 0,
0, 0, 1.9, 0,
0, 0, 1.9, 0,
0, 0, 2, 0),ncol=4, byrow=TRUE)
as <- matrix(c(
1, 1,
8, 2,
13, 2,
16, 3,
40, 4)
, ncol=2, byrow=TRUE)
assigns <- matrix(c(as[,1], as[,2], as[,2]), ncol=3, nrow=nrow(as))
monotonicity <- c(TRUE, TRUE, TRUE, TRUE, TRUE)
cardinalities <- NULL#matrix(c(1, 1, -1,
#  2, 2, 3,
# 3, 1, -1), ncol=3, byrow=TRUE)
pairwiseComparisionsK <- NULL#matrix(c(1, 2, 1), ncol=3, byrow=TRUE)
pairwiseComparisionsL <- NULL#matrix(c(5, 2, 2), ncol=3, byrow=TRUE)
message("--- starting tests, iteration 1")
profs <- etric.createBorderProfiles(alts,profs,monotonicity)
etri <- etric.init(alts, profs, assigns, monotonicity, th=thresholds,
cardinalities, pairwiseComparisionsK, pairwiseComparisionsL)
etric.isFeasible(etri, .solver)
p <- etric.possibleAssigment(etric=etri, .solver)
p
n <- etric.necessaryAssigment(etri, .solver)
library(ROI.plugin.glpk)
library(ROI)
solvers <- ROI_installed_solvers()
if (!is.na(solvers['symphony'])) {
.solver <<- 'symphony'
} else if (!is.na(solvers['glpk'])) {
.solver <<- 'glpk'
} else {
stop("No ROI Symphony or GLPK plugin installed")
}
source('etric.R')
#warianty
alts <- read.table(file="alts_test.csv", sep=",", header=TRUE)
rownames(alts) = alts[,1]
alts <- alts[,2:ncol(alts)]
#granice klas
profs <- read.table(file="profs_test.csv", sep=",", header=FALSE)
rownames(profs) = profs[,1]
profs <- profs[,2:ncol(profs)]
colnames(profs) <- colnames(alts)
thresholds <- matrix(c(
0, 0.01, 0, 0.02,
0, 0, 1.9, 0,
0, 0, 1.9, 0,
0, 0, 1.9, 0,
0, 0, 2, 0),ncol=4, byrow=TRUE)
as <- matrix(c(
1, 1,
8, 2,
13, 2,
16, 3,
40, 4)
, ncol=2, byrow=TRUE)
assigns <- matrix(c(as[,1], as[,2], as[,2]), ncol=3, nrow=nrow(as))
monotonicity <- c(FALSE, FALSE, FALSE, FALSE, FALSE)
cardinalities <- NULL#matrix(c(1, 1, -1,
#  2, 2, 3,
# 3, 1, -1), ncol=3, byrow=TRUE)
pairwiseComparisionsK <- NULL#matrix(c(1, 2, 1), ncol=3, byrow=TRUE)
pairwiseComparisionsL <- NULL#matrix(c(5, 2, 2), ncol=3, byrow=TRUE)
message("--- starting tests, iteration 1")
profs <- etric.createBorderProfiles(alts,profs,monotonicity)
etri <- etric.init(alts, profs, assigns, monotonicity, th=thresholds,
cardinalities, pairwiseComparisionsK, pairwiseComparisionsL)
etric.isFeasible(etri, .solver)
p <- etric.possibleAssigment(etric=etri, .solver)
View(profs)
library(ROI.plugin.glpk)
library(ROI)
solvers <- ROI_installed_solvers()
if (!is.na(solvers['symphony'])) {
.solver <<- 'symphony'
} else if (!is.na(solvers['glpk'])) {
.solver <<- 'glpk'
} else {
stop("No ROI Symphony or GLPK plugin installed")
}
source('etric.R')
#warianty
alts <- read.table(file="alts_test.csv", sep=",", header=TRUE)
rownames(alts) = alts[,1]
alts <- alts[,2:ncol(alts)]
#granice klas
profs <- read.table(file="profs_test.csv", sep=",", header=FALSE)
rownames(profs) = profs[,1]
profs <- profs[,2:ncol(profs)]
colnames(profs) <- colnames(alts)
thresholds <- matrix(c(
0, 0.01, 0, 0.02,
0, 0, 1.9, 0,
0, 0, 1.9, 0,
0, 0, 1.9, 0,
0, 0, 2, 0),ncol=4, byrow=TRUE)
as <- matrix(c(
1, 1,
8, 2,
13, 2,
16, 3,
40, 4)
, ncol=2, byrow=TRUE)
assigns <- matrix(c(as[,1], as[,2], as[,2]), ncol=3, nrow=nrow(as))
monotonicity <- c(FALSE, FALSE, FALSE, FALSE, FALSE)
cardinalities <- NULL#matrix(c(1, 1, -1,
#  2, 2, 3,
# 3, 1, -1), ncol=3, byrow=TRUE)
pairwiseComparisionsK <- NULL#matrix(c(1, 2, 1), ncol=3, byrow=TRUE)
pairwiseComparisionsL <- NULL#matrix(c(5, 2, 2), ncol=3, byrow=TRUE)
message("--- starting tests, iteration 1")
profs <- etric.createBorderProfiles(alts,profs,monotonicity)
etri <- etric.init(alts, profs, assigns, monotonicity, th=thresholds,
cardinalities, pairwiseComparisionsK, pairwiseComparisionsL)
f <- etric.isFeasible(etri, .solver)
f
if(f){
p <- etric.possibleAssigment(etric=etri, .solver)
p
n <- etric.necessaryAssigment(etri, .solver)
n
#r <- etric.necessaryPreferenceRelation(etri, .solver)
#r
cc <- etric.classCardinalities(etri, FALSE, .solver)
cc
}
#etri$constr$lhs[str_detect(rownames(etri$constr$lhs),"PCL12.*"),]
